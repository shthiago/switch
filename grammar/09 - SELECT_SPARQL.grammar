QueryUnit                 ::= Query
Query                     ::= Prologue SelectQuery ValuesClause
Prologue                  ::= ( BaseDecl | PrefixDecl )*
BaseDecl                  ::= 'BASE' IRIREF
PrefixDecl                ::= 'PREFIX' PNAME_NS IRIREF
SelectQuery               ::= SelectClause WhereClause SolutionModifier
SelectClause              ::= 'SELECT' ( 'DISTINCT' | 'REDUCED' )? ( ( Var | ( '(' Expression 'AS' Var ')' ) )+ | '*' )
WhereClause               ::= 'WHERE'? GroupGraphPattern
SolutionModifier          ::= ( GroupClause )? ( HavingClause )? ( OrderClause )? ( LimitOffsetClauses )?
GroupClause               ::= 'GROUP' 'BY' ( GroupCondition )+
GroupCondition            ::= BuiltInCall | '(' Expression ( 'AS' Var )? ')' | Var
HavingClause              ::= 'HAVING' ( HavingCondition )+
HavingCondition           ::= Constraint
OrderClause               ::= 'ORDER' 'BY' ( OrderCondition )+
OrderCondition            ::= ( ( 'ASC' | 'DESC' ) BrackettedExpression ) | ( Constraint | Var )
LimitOffsetClauses        ::= LimitClause ( OffsetClause )? | OffsetClause ( LimitClause )?
LimitClause               ::= 'LIMIT' INTEGER
OffsetClause              ::= 'OFFSET' INTEGER
ValuesClause              ::= ( 'VALUES' DataBlock )?
GroupGraphPattern         ::= '{' ( GroupGraphPatternSub ) '}'
GroupGraphPatternSub      ::= ( TriplesBlock )? ( GraphPatternNotTriples '.'? ( TriplesBlock )? )*
TriplesBlock              ::= TriplesSameSubjectPath ( '.' ( TriplesBlock )? )?
GraphPatternNotTriples    ::= GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | Filter | Bind | InlineData
OptionalGraphPattern      ::= 'OPTIONAL' GroupGraphPattern
Bind                      ::= 'BIND' '(' Expression 'AS' Var ')'
InlineData                ::= 'VALUES' DataBlock
DataBlock                 ::= InlineDataOneVar | InlineDataFull
InlineDataOneVar          ::= Var '{' DataBlockValue* '}'
InlineDataFull            ::= ( NIL | '(' ( Var )* ')' ) '{' ( '(' ( DataBlockValue )* ')' | NIL )* '}'
DataBlockValue            ::= iri | RDFLiteral | NumericLiteral | BooleanLiteral | 'UNDEF'
MinusGraphPattern         ::= 'MINUS' GroupGraphPattern
GroupOrUnionGraphPattern  ::= GroupGraphPattern ( 'UNION' GroupGraphPattern )*
Filter                    ::= 'FILTER' Constraint
Constraint                ::= BrackettedExpression | BuiltInCall
ExpressionList            ::= NIL | '(' Expression ( ',' Expression )* ')'
PropertyListNotEmpty      ::= Verb ObjectList ( ';' ( Verb ObjectList )? )*
Verb                      ::= VarOrIri | 'a'
ObjectList                ::= Object ( ',' Object )*
Object                    ::= GraphNode
TriplesSameSubjectPath    ::= VarOrTerm PropertyListPathNotEmpty | TriplesNodePath PropertyListPath
PropertyListPath          ::= ( PropertyListPathNotEmpty )?
PropertyListPathNotEmpty  ::= ( VerbPath | VerbSimple ) ObjectListPath ( ';' ( ( VerbPath | VerbSimple ) ObjectList )? )*
VerbPath                  ::= Path
VerbSimple                ::= Var
ObjectListPath            ::= ObjectPath ( ',' ObjectPath )*
ObjectPath                ::= GraphNodePath
Path                      ::= PathAlternative
PathAlternative           ::= PathSequence ( '|' PathSequence )*
PathSequence              ::= PathEltOrInverse ( '/' PathEltOrInverse )*
PathElt                   ::= PathPrimary ( PathMod )?
PathEltOrInverse          ::= PathElt | '^' PathElt
PathMod                   ::= '?' | '*' | '+'
PathPrimary               ::= iri | 'a' | '!' PathNegatedPropertySet | '(' Path ')'
PathNegatedPropertySet    ::= PathOneInPropertySet | '(' ( PathOneInPropertySet ( '|' PathOneInPropertySet )* )? ')'
PathOneInPropertySet      ::= iri | 'a' | '^' ( iri | 'a' )
TriplesNode               ::= Collection | BlankNodePropertyList
BlankNodePropertyList     ::= '[' PropertyListNotEmpty ']'
TriplesNodePath           ::= CollectionPath | BlankNodePropertyListPath
BlankNodePropertyListPath ::= '[' PropertyListPathNotEmpty ']'
Collection                ::= '(' ( GraphNode )+ ')'
CollectionPath            ::= '(' ( GraphNodePath )+ ')'
GraphNode                 ::= VarOrTerm | TriplesNode
GraphNodePath             ::= VarOrTerm | TriplesNodePath
VarOrTerm                 ::= Var | GraphTerm
VarOrIri                  ::= Var | iri
Var                       ::= VAR1 | VAR2
GraphTerm                 ::= iri | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NIL
Expression                ::= ConditionalOrExpression
ConditionalOrExpression   ::= ConditionalAndExpression ( '||' ConditionalAndExpression )*
ConditionalAndExpression  ::= ValueLogical ( '&&' ValueLogical )*
ValueLogical              ::= RelationalExpression
RelationalExpression      ::= NumericExpression ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression | 'IN' ExpressionList | 'NOT' 'IN' ExpressionList )?
NumericExpression         ::= AdditiveExpression
AdditiveExpression        ::= MultiplicativeExpression ( '+' MultiplicativeExpression | '-' MultiplicativeExpression )*
MultiplicativeExpression  ::= UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
UnaryExpression           ::= '!' PrimaryExpression | '+' PrimaryExpression | '-' PrimaryExpression | PrimaryExpression
PrimaryExpression         ::= BrackettedExpression | BuiltInCall | iri | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression      ::= '(' Expression ')'
BuiltInCall               ::= Aggregate | 'RAND' NIL | 'ABS' '(' Expression ')' | 'CEIL' '(' Expression ')' | 'FLOOR' '(' Expression ')' | 'ROUND' '(' Expression ')' | 'CONCAT' ExpressionList | SubstringExpression | 'STRLEN' '(' Expression ')' | StrReplaceExpression | 'UCASE' '(' Expression ')' | 'LCASE' '(' Expression ')' | 'CONTAINS' '(' Expression ',' Expression ')' | 'STRSTARTS' '(' Expression ',' Expression ')' | 'STRENDS' '(' Expression ',' Expression ')' | 'YEAR' '(' Expression ')' | 'MONTH' '(' Expression ')' | 'DAY' '(' Expression ')' | 'HOURS' '(' Expression ')' | 'MINUTES' '(' Expression ')' | 'SECONDS' '(' Expression ')' | 'TIMEZONE' '(' Expression ')' | 'TZ' '(' Expression ')' | 'NOW' NIL | 'COALESCE' ExpressionList | RegexExpression
RegexExpression           ::= 'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
SubstringExpression       ::= 'SUBSTR' '(' Expression ',' Expression ( ',' Expression )? ')'
StrReplaceExpression      ::= 'REPLACE' '(' Expression ',' Expression ',' Expression ( ',' Expression )? ')'
Aggregate                 ::= 'COUNT' '(' 'DISTINCT'? ( '*' | Expression ) ')' | 'SUM' '(' 'DISTINCT'? Expression ')' | 'MIN' '(' 'DISTINCT'? Expression ')' | 'MAX' '(' 'DISTINCT'? Expression ')' | 'AVG' '(' 'DISTINCT'? Expression ')'
RDFLiteral                ::= String ( LANGTAG | ( '^^' iri ) )?
NumericLiteral            ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned    ::= INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive    ::= INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
NumericLiteralNegative    ::= INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
BooleanLiteral            ::= 'true' | 'false'
String                    ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
iri                       ::= IRIREF | PrefixedName
PrefixedName              ::= PNAME_LN | PNAME_NS
BlankNode                 ::= BLANK_NODE_LABEL | ANON
